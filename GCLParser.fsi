// Signature file for parser generated by fsyacc
module GCLParser
type token = 
  | IFELSE
  | ASS
  | SKIP
  | SEMI
  | IF
  | FI
  | DO
  | OD
  | ARROW
  | LBRAC
  | RBRAC
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | SQRT
  | TRUE
  | FALSE
  | OR
  | SCOR
  | AND
  | SCAND
  | NUT
  | EQUAL
  | NEQ
  | GT
  | LT
  | GEQ
  | LEQ
  | EOF
  | DFLAG
  | NDFLAG
  | PFLAG
  | STEPFLAG
  | SAFLAG
  | SECFLAG
  | FLFLAG
  | VAR of (string)
  | NUM of (int)
type tokenId = 
    | TOKEN_IFELSE
    | TOKEN_ASS
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_ARROW
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SQRT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_OR
    | TOKEN_SCOR
    | TOKEN_AND
    | TOKEN_SCAND
    | TOKEN_NUT
    | TOKEN_EQUAL
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GEQ
    | TOKEN_LEQ
    | TOKEN_EOF
    | TOKEN_DFLAG
    | TOKEN_NDFLAG
    | TOKEN_PFLAG
    | TOKEN_STEPFLAG
    | TOKEN_SAFLAG
    | TOKEN_SECFLAG
    | TOKEN_FLFLAG
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_c
    | NONTERM_f
    | NONTERM_gc
    | NONTERM_gc2
    | NONTERM_a
    | NONTERM_a1
    | NONTERM_a2
    | NONTERM_a3
    | NONTERM_b
    | NONTERM_b1
    | NONTERM_b2
    | NONTERM_b3
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (flag*Com) 
